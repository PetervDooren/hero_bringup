Ewrite:			What:		Should be called:

  base_Ain1      
  base_Ain2      
  base_Aout1     
  generic_Din1   
  generic_Din2   
  generic_Din3   
  generic_Din4   
  generic_Din5   
  generic_Din6   
  generic_Dout1  
  generic_Dout2  
  left_arm_Ain1  
  left_arm_Aout1 
  left_arm_Aout2 
  left_arm_Aout3 
  right_arm_Ain1 
  right_arm_Aout1 
  right_arm_Aout2 
  right_arm_Aout3

Eread:				What:					Should be called:

  base_Ein1      	EncIn					baseEncIn1				-> Eread bodypart+"EncIn"+number								
  base_Ein2      
  base_Ein3      
  base_Ein4      
  base_Eout1     	EncOut					baseEncOut				-> Eread bodypart+"EncOut"+number(if (number != 1))
  base_Eout_vel1 	EncOutVel				baseEncOutVel			-> Eread bodypart+"EncOutVel"+number(if (number != 1))
  generic_Ain1   	BatteryIn				soemBatteryIn			-> All generics should be Amigo
  generic_Aout1  	BatteryOut				amigoBatteryOut
  generic_AoutMsg1 	BatteryOutMsg			amigoBatteryOutMsg
  generic_Din1   	EL1008					digitalIn				-> 
  generic_Dout1  	Fuse					amigoFuse1
  generic_Dout2  
  generic_Dout3  
  generic_Dout4  
  generic_Dout5  	runstop					amigoRunstop
  generic_Dout6  	emergency_switch		amigoEmergencySwitch
  generic_DoutMsg1 
  generic_DoutMsg2 
  generic_DoutMsg3 
  generic_DoutMsg4 
  generic_DoutMsg5 
  generic_DoutMsg6 
  left_arm_Ain1  
  left_arm_Ain2  
  left_arm_Ain3  
  left_arm_Ain4  
  left_arm_Ain5  
  left_arm_Ain6  
  left_arm_Aout1 
  left_arm_Aout2 
  left_arm_Ein1  
  left_arm_Ein2  
  left_arm_Ein3  
  left_arm_Ein4  
  left_arm_Ein5  
  left_arm_Ein6  
  left_arm_Ein7  
  left_arm_Ein8  
  left_arm_Eout1 
  left_arm_EoutMsg1 
  left_arm_Eout_vel1 
  left_arm_Esatout1 
  right_arm_Ain1 
  right_arm_Ain2 
  right_arm_Ain3 
  right_arm_Ain4 
  right_arm_Ain5 
  right_arm_Ain6 
  right_arm_Aout1 
  right_arm_Aout2 
  right_arm_Ein1 
  right_arm_Ein2 
  right_arm_Ein3 
  right_arm_Ein4 
  right_arm_Ein5 
  right_arm_Ein6 
  right_arm_Ein7 
  right_arm_Ein8 
  right_arm_Eout1 
  right_arm_EoutMsg1 
  right_arm_Eout_vel1 
  right_arm_Esatout1 
  spindle_Din1   
  spindle_Dout1  
  spindle_Dout2  
  spindle_DoutMsg1 
  spindle_DoutMsg2 
  spindle_Ein1   
  spindle_Eout1  
  spindle_Eout_vel1 


	1) It is not allowed to provide a vector of strings in Orocos "Battery; Fuse1; Fuse2; Fuse3; Fuse4;" Could be an option. Where the delimiter ';' separates the entries.
	2) The A,E,D annotations are not clear. E should become Enc, Strings are for the encoders not needed anymore since they are alwas encoders and the bodypart is already denoted.
	3) Concept: Copy all AddIns and AddOut functions to have one with the normal arguments and one with the normal arguments plus two strings.
				The two strings should provide names for each port. For example one could load the analog ins of arm 1 with the top line (Same as old)
	
EtherCATread.AddAnalogIns(BODYPARTNAME, array(3.0, 3.0, 3.0, 3.0, 3.0, 3.0), array(8.0, 8.0), array(1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0), array(1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0))
EtherCATread.AddAnalogIns(BODYPARTNAME, array(3.0, 3.0, 3.0, 3.0, 3.0, 3.0), array(8.0, 8.0), array(1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0), array(1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0), "SLAVE1;SLAVE2;SLAVE3;SLAVE1;SLAVE2;SLAVE3","Torque;AbsPos")
